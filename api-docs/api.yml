openapi: 3.0.0
info:
  description: |
    This is bolbolestan server api documentation
  version: "1.0.0"
  title: Bolbolestan
  contact:
    email: sssanikhani@gmail.com
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sssanikhani/Bolbolestan/1.0.0
tags:
  - name: authorization
    description: Authorization api endpoints
  - name: student
    description: Student api endpoints
  - name: offerings
    description: Offerings api endpoints

paths:
  
  /auth/signup:
    post:
      tags:
        - authorization
      summary: Signup student
      operationId: studentSignup
      requestBody:
        $ref: '#/components/requestBodies/Signup'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - authorization
      summary: Login student
      operationId: studentLogin
      requestBody:
        $ref: '#/components/requestBodies/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/forget-password:
    post:
      tags:
        - authorization
      summary: Forget password
      operationId: userForgetPassword
      requestBody:
        $ref: '#/components/requestBodies/ForgetPassword'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
  
  /auth/change-password:
    post:
      tags:
        - authorization
      summary: Change password
      operationId: userChangePassword
      requestBody:
        $ref: '#/components/requestBodies/ChangePassword'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'

  /student:
    get:
      tags:
        - student
      summary: Get student information
      operationId: getStudent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /student/report-card:
    get:
      tags:
        - student
      summary: Get student report card
      operationId: getStudentReportCard

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TermReport'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /student/plan:
    get:
      tags:
        - student
      summary: Get student plan
      operationId: getStudentPlan
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /student/offerings:
    get:
      tags:
        - student
      summary: Get student all offerings
      operationId: getStudentOfferings
      responses:
        '200':
          $ref: '#/components/responses/StudentOfferings'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - student
      summary: Add offering for student
      operationId: addStudentOffering
      requestBody:
        $ref: '#/components/requestBodies/Offering'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags:
        - student
      summary: Remove chosen offering for student
      operationId: removeStudentOffering
      requestBody:
        $ref: '#/components/requestBodies/Offering'
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /student/offerings/submit:
    post:
      tags:
        - student
      summary: Submit current chosen offerings
      operationId: submitOfferings
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
  
  /student/offerings/reset:
    post:
      tags:
        - student
      summary: Reset chosen offerings
      operationId: resetOfferings
      responses:
        '200':
          $ref: '#/components/responses/OK'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /offerings:
    get:
      tags:
        - offerings
      summary: Get all offerings
      operationId: getAllOfferings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offering'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /offerings/search:
    get:
      tags:
        - offerings
      summary: Search offerings
      operationId: searchOfferings
      parameters:
        - name: q
          description: Search query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offering'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:

    TermReport:
      type: object
      properties:
        term:
          type: integer
          format: int64
          example: 5
        gpa:
          type: number
          format: float
          example: 19.05
        units:
          type: integer
          format: int64
          example: 17
        grades:
          type: array
          items:
            $ref: '#/components/schemas/TermGrade'
    
    TermGrade:
      type: object
      properties:
        term:
          type: integer
          format: int64
          example: 5
        passed:
          type: boolean
          example: true
        grade:
          type: number
          format: float
          example: 18.00
        course:
          $ref: '#/components/schemas/Course'
    
    Student:
      type: object
      properties:
        id:
          type: string
          example: '810197000'
        name:
          type: string
          example: 'تست'
        secondName:
          type: string
          example: 'تست پور'
        birthDate:
          type: string
          example: '1379/03/25'
        gpa:
          type: number
          format: float
          example: 18.00
        totalPassedUnits:
          type: integer
          format: int64
          example: 94
        faculty:
          type: string
          example: 'پردیس دانشکده های فنی'
        field:
          type: string
          example: 'مهندسی کامپیوتر'
        level:
          type: string
          example: 'کارشناسی'
        status:
          type: string
          example: 'مشغول به تحصیل'
        img:
          type: string
          format: link
          example: 'http://localhost:8000/image'

    NewStudent:
      type: object
      properties:
        id:
          type: string
          example: '810197000'
        email:
          type: string
          example: 'test@ut.ac.ir'
        password:
          type: string
          example: '1234'
        name:
          type: string
          example: 'تست'
        secondName:
          type: string
          example: 'تست پور'
        birthDate:
          type: string
          example: '1379/03/25'
        faculty:
          type: string
          example: 'پردیس دانشکده های فنی'
        field:
          type: string
          example: 'مهندسی کامپیوتر'
        level:
          type: string
          example: 'کارشناسی'
        status:
          type: string
          example: 'مشغول به تحصیل'
        img:
          type: string
          format: link
          example: 'http://localhost:8000/image'
    
    StudentOffering:
      type: object
      properties:
        status:
          type: string
          example: 'registered'
        offering:
          $ref: '#/components/schemas/Offering'
    
    Offering:
      type: object
      properties:
        classCode:
          type: string
          example: '1'
        teacher:
          type: string
          example: 'رامتین خسروی'
        capacity:
          type: integer
          format: int64
        registered:
          type: integer
          format: int64
        time:
          type: string
          example: '10:30-12:00'
        isFull:
          type: boolean
          example: true
        course:
          $ref: '#/components/schemas/Course'

    Course:
      type: object
      properties:
        code:
          type: string
          example: '8101000'
        name:
          type: string
          example: 'برنامه نویسی پیشرفته'
        type:
          type: string
          example: 'Asli'
        units:
          type: integer
          format: int64
          example: 3
    
    Plan:
      type: object
      properties:
        Saturday:
          type: array
          items:
            $ref: '#/components/schemas/Offering'
    
    DayPlan:
      type: object
      properties:
        day:
          type: string
          example: 'saturday'
        offerings:
          type: array
          items:
            $ref: '#/components/schemas/Offering'

    AuthToken:
      type: object
      properties:
        access:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJsb2NhbGhvc3Q6ODA4MCIsImlhdCI6MTYyMTI0NzYwMiwiZXhwIjoxNjIxMjQ4ODAwLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIn0.62zLCroq7ihyW8hhNETE0M63KVtpaF3H3ZFDFVHy8Y8"

  requestBodies:
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: 'test@ut.ac.ir'
              password:
                type: string
                example: '1234'
    Offering:
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '8101000'
              classCode:
                type: string
                example: '1'
    Signup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewStudent'
    ForgetPassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: 'test@ut.ac.ir'
    ChangePassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
                example: '1234'
    
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              short:
                type: string
                example: 'OK'
              message:
                type: string
                example: 'successful operation'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              short:
                type: string
                example: 'NotFound'
              message:
                type: string
                example: 'entity you requested not found'
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              short:
                type: string
                example: 'BadRequest'
              message:
                type: string
                example: 'incorrect request parameters'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 403
              short:
                type: string
                example: 'Forbidden'
              message:
                type: string
                example: "you're not allowed to perform this action"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              short:
                type: string
                example: 'Unauthorized'
              message:
                type: string
                example: "you must login first"
    Conflict:
      description: AlreadyExists
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 409
              short:
                type: string
                example: 'AlreadyExists'
              message:
                type: string
                example: "the user with this email or id already exists"
    
    StudentOfferings:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              chosenUnits:
                type: integer
                example: 15
              offerings:
                type: array
                items:
                  $ref: '#/components/schemas/StudentOffering'